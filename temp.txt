# Create a Matplotlib figure and axis
# fig, ax = plt.subplots()

# Draw the graph using Matplotlib
# pos = nx.spring_layout(graph)  # Define node positions (you can choose a layout)
# nx.draw(graph, pos, with_labels=True, node_size=300)

# Add labels to nodes (optional)
# labels = {node: f"{node}" for node in graph.nodes()}
# nx.draw_networkx_labels(graph, pos, labels)

# Show the visualization
# plt.show()

# graph = nx.Graph()
# # Add nodes and edges to the graph

# # Call the A* algorithm
# start_node = 'A'  # Replace with your actual start node
# goal_node = 'B'   # Replace with your actual goal node
# path = astar(graph, start_node, goal_node)

# # Visualize the graph and path
# pos = nx.spring_layout(graph)  # Adjust layout as needed
# nx.draw(graph, pos, with_labels=True, node_size=300)
# nx.draw_networkx_labels(graph, pos, labels={node: node for node in graph.nodes()})
# if path:
#     path_edges = [(path[i], path[i + 1]) for i in range(len(path) - 1)]
#     nx.draw_networkx_edges(graph, pos, edgelist=path_edges, edge_color='r', width=2)
# plt.show()



    print("A* using admissible heuristics")
    print("Time taken for A* search (manhattan_distance): ", runAnalysis(astar, 1, manhattan_distance, G))
    print("Time taken for A* search (euclidean distance): ", test(astar, 1000, euclidean_distance, G))
    print()
    print("A* using inadmissible heursitics")
    print("Time taken for A* search (diagonal_distance): ", test(astar, 1000, euclidean_distance, G))
    print("Time taken for A* search (weighted_manhattan): ", test(astar, 1000, euclidean_distance, G))
    print()
    print("Greedy Best-first-search using admissible heuristics")
    print("Time taken for Greedy search (manhattan_distance): ", runAnalysis(greedy_best_first_search, 1, manhattan_distance, G))
    print("Time taken for Greedy search (euclidean distance): ", test(greedy_best_first_search, 1000, euclidean_distance, G))
    print()
    print("Greedy Best-first-search using inadmissible heursitics")
    print("Time taken for Greedy search (diagonal_distance): ", test(greedy_best_first_search, 1000, euclidean_distance, G))
    print("Time taken for Greedy search (weighted_manhattan): ", test(greedy_best_first_search, 1000, euclidean_distance, G))
    print()
    print("Djikstra's (A* No Heuristics)")
    print("Time taken for Djikstra's search: ", runAnalysis(dijkstra, 1, None, G))
    print()
    print("Breadth-first search")
    print("Time taken for BFS", runAnalysis(breadth_first_search, 1, None, G))
    print()
    print("Depth-first search")
    print("Time taken for DFS", runAnalysis(depth_first_search, 1, None, G))
    return 0


# def runAnalysis(search_algorithm, cycles, heuristic, G):
#     num_cities = len(G)
#     if heuristic:
#         time_start = time.perf_counter()
#         for i in range(cycles):
#             start = random.randint(0, num_cities-1)
#             goal = start
#             while goal == start:
#                 goal = random.randint(0, num_cities-1)

#             start, goal = 0, 928
#             print(start, " to ", goal)
#             print(search_algorithm(G, start, goal, heuristic))

#         time_end = time.perf_counter()
#         return abs(time_end-time_start)
    
#     else:
#         time_start = time.perf_counter()
#         for i in range(cycles):
#             start = random.randint(0, num_cities-1)
#             goal = start
#             while goal == start:
#                 goal = random.randint(0, num_cities-1)
#             start, goal = 0, 928
#             print(start, " to ", goal)
#             print(search_algorithm(G, start, goal))

#         time_end = time.perf_counter()
#         return abs(time_end-time_start)
